<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="XWiki.PDFViewerService" locale="">
  <web>XWiki</web>
  <name>PDFViewerService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>XWiki.PDFViewerMacro</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{groovy}}
  import org.xwiki.security.authorization.Right
  import javax.servlet.ServletOutputStream
  import org.apache.commons.io.IOUtils;
  import org.xwiki.crypto.DigestFactory;
  import org.xwiki.crypto.BinaryStringEncoder;

  def reference = request.get('reference')
  def filename = request.get('filename')
  def user = request.get('user')
  def key = request.get('key')

  if (!reference || !filename || !user || !key)
    return;

  def userRef = services.model.resolveDocument(user)
  def pdfDocRef = services.model.resolveDocument(reference)

  if(services.security.authorization.hasAccess(Right.VIEW, userRef, pdfDocRef)) {
    // Changing the context user
    def currentUserRef = xcontext.context.getUserReference()
    xcontext.context.setUserReference(userRef)
    try {
      // Getting the document
      def pdfXDoc = xwiki.getDocument(pdfDocRef)
      def attachment = pdfXDoc.getAttachment(filename)
      def digestFactory = services.component.getInstance(DigestFactory.class, 'SHA-1')
      def encoder = services.component.getInstance(BinaryStringEncoder.class, 'URLBase64')
      def digest = digestFactory.instance
      def is = digest.getInputStream(attachment.contentInputStream)
      is.skip(1000)
      is.close()
      if (currentUserRef) {
        digest.update(services.model.serialize(currentUserRef, 'default').getBytes('UTF-8'))
      }
      digest.update(services.model.serialize(userRef, 'default').getBytes('UTF-8'))
      def check = encoder.encode(digest.digest)
      if(key.equals(check)) {
        // Adding the PDF content in the response
        response.setContentType("application/pdf")
        IOUtils.copyLarge(pdfXDoc.getAttachment(filename).getContentInputStream(), response.getOutputStream())
      }
    } finally {
      // Changing back the context user
      xcontext.context.setUserReference(currentUserRef)
    }
  }
{{/groovy}}</content>
</xwikidoc>
